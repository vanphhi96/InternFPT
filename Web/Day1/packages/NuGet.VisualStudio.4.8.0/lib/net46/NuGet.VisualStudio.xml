<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.VisualStudio</name>
    </assembly>
    <members>
        <member name="T:NuGet.VisualStudio.IVsCredentialProvider">
            <summary>
            Contains methods to get credentials for NuGet operations.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsCredentialProvider.GetCredentialsAsync(System.Uri,System.Net.IWebProxy,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get credentials for the supplied package source Uri.
            </summary>
            <param name="uri">The NuGet package source Uri for which credentials are being requested. Implementors are
            expected to first determine if this is a package source for which they can supply credentials.
            If not, then Null should be returned.</param>
            <param name="proxy">Web proxy to use when comunicating on the network.  Null if there is no proxy
            authentication configured.</param>
            <param name="isProxyRequest">True if if this request is to get proxy authentication
            credentials. If the implementation is not valid for acquiring proxy credentials, then
            null should be returned.</param>
            <param name="isRetry">True if credentials were previously acquired for this uri, but
            the supplied credentials did not allow authorized access.</param>
            <param name="nonInteractive">If true, then interactive prompts must not be allowed.</param>
            <param name="cancellationToken">This cancellation token should be checked to determine if the
            operation requesting credentials has been cancelled.</param>
            <returns>Credentials acquired by this provider for the given package source uri.
            If the provider does not handle requests for the input parameter set, then null should be returned.
            If the provider does handle the request, but cannot supply credentials, an exception should be thrown.</returns>
        </member>
        <member name="T:NuGet.VisualStudio.IVsFrameworkCompatibility">
            <summary>
            Contains methods to discover frameworks and compatibility between frameworks.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsFrameworkCompatibility.GetNetStandardFrameworks">
            <summary>
            Gets all .NETStandard frameworks currently supported, in ascending order by version.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsFrameworkCompatibility.GetFrameworksSupportingNetStandard(System.Runtime.Versioning.FrameworkName)">
            <summary>
            Gets frameworks that support packages of the provided .NETStandard version.
            </summary>
            <remarks>
            The result list is not exhaustive as it is meant to human-readable. For example,
            equivalent frameworks are not returned. Additionally, a framework name with version X
            in the result implies that framework names with versions greater than or equal to X
            but having the same <see cref="P:System.Runtime.Versioning.FrameworkName.Identifier" /> are also supported.
            </remarks>
            <param name="frameworkName">The .NETStandard version to get supporting frameworks for.</param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsFrameworkCompatibility.GetNearest(System.Runtime.Versioning.FrameworkName,System.Collections.Generic.IEnumerable{System.Runtime.Versioning.FrameworkName})">
            <summary>
            Selects the framework from <paramref name="frameworks" /> that is nearest
            to the <paramref name="targetFramework" />, according to NuGet's framework
            compatibility rules. <c>null</c> is returned of none of the frameworks
            are compatible.
            </summary>
            <param name="targetFramework">The target framework.</param>
            <param name="frameworks">The list of frameworks to choose from.</param>
            <exception cref="T:System.ArgumentException">If any of the arguments are <c>null</c>.</exception>
            <returns>The nearest framework.</returns>
        </member>
        <member name="T:NuGet.VisualStudio.IVsFrameworkCompatibility2">
            <summary>
            Contains methods to discover frameworks and compatibility between frameworks.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsFrameworkCompatibility2.GetNearest(System.Runtime.Versioning.FrameworkName,System.Collections.Generic.IEnumerable{System.Runtime.Versioning.FrameworkName},System.Collections.Generic.IEnumerable{System.Runtime.Versioning.FrameworkName})">
            <summary>
            Selects the framework from <paramref name="frameworks" /> that is nearest
            to the <paramref name="targetFramework" />, according to NuGet's framework
            compatibility rules. <c>null</c> is returned of none of the frameworks
            are compatible.
            </summary>
            <param name="targetFramework">The target framework.</param>
            <param name="fallbackTargetFrameworks">
            Target frameworks to use if the provided <paramref name="targetFramework" /> is not compatible.
            These fallback frameworks are attempted in sequence after <paramref name="targetFramework" />.
            </param>
            <param name="frameworks">The list of frameworks to choose from.</param>
            <exception cref="T:System.ArgumentException">If any of the arguments are <c>null</c>.</exception>
            <returns>The nearest framework.</returns>
        </member>
        <member name="T:NuGet.VisualStudio.IVsFrameworkParser">
            <summary>
            An interface for dealing with the conversion between strings and <see cref="T:System.Runtime.Versioning.FrameworkName" />
            instances.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsFrameworkParser.ParseFrameworkName(System.String)">
            <summary>
            Parses a short framework name (e.g. "net45") or a full framework name
            (e.g. ".NETFramework,Version=v4.5") into a <see cref="T:System.Runtime.Versioning.FrameworkName" />
            instance.
            </summary>
            <param name="shortOrFullName">The framework string.</param>
            <exception cref="T:System.ArgumentNullException">If the provided string is null.</exception>
            <exception cref="T:System.ArgumentException">If the provided string cannot be parsed.</exception>
            <returns>The parsed framework.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsFrameworkParser.GetShortFrameworkName(System.Runtime.Versioning.FrameworkName)">
            <summary>
            Gets the shortened version of the framework name from a <see cref="T:System.Runtime.Versioning.FrameworkName" />
            instance.
            </summary>
            <remarks>
            For example, ".NETFramework,Version=v4.5" is converted to "net45". This is the value
            used inside of .nupkg folder structures as well as in project.json files.
            </remarks>
            <param name="frameworkName">The framework name.</param>
            <exception cref="T:System.ArgumentNullException">If the input is null.</exception>
            <exception cref="T:System.ArgumentException">
            If the provided framework name cannot be converted to a short name.
            </exception>
            <returns>The short framework name. </returns>
        </member>
        <member name="T:NuGet.VisualStudio.IVsGlobalPackagesInitScriptExecutor">
            <summary>
            Execute powershell scripts from package(s) in a solution
            </summary>
            <remarks>Intended for internal use only.</remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsGlobalPackagesInitScriptExecutor.ExecuteInitScriptAsync(System.String,System.String)">
            <summary>
            Executes the init script of the given package if available.
            1) If the init.ps1 script has already been executed by the powershell host, it will not be executed again.
            True is returned.
            2) If the package is found in the global packages folder it will be used.
            If not, it will return false and do nothing.
            3) Also, note if other scripts are executing while this call was made, it will wait for them to complete.
            </summary>
            <param name="packageId">Id of the package whose init.ps1 will be executed.</param>
            <param name="packageVersion">Version of the package whose init.ps1 will be executed.</param>
            <returns>Returns true if the script was executed or has been executed already.</returns>
            <remarks>This method throws if the init.ps1 being executed throws.</remarks>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstaller">
            <summary>
            Contains methods to install packages into a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(System.String,EnvDTE.Project,System.String,System.Version,System.Boolean)">
            <summary>
            Installs a single package from the specified package source.
            </summary>
            <param name="source">
            The package source to install the package from. This value can be <c>null</c>
            to indicate that the user's configured sources should be used. Otherwise,
            this should be the source path as a string. If the user has credentials
            configured for a source, this value must exactly match the configured source
            value.
            </param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package ID of the package to install.</param>
            <param name="version">
            The version of the package to install. <c>null</c> can be provided to
            install the latest version of the package.
            </param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(System.String,EnvDTE.Project,System.String,System.String,System.Boolean)">
            <summary>
            Installs a single package from the specified package source.
            </summary>
            <param name="source">
            The package source to install the package from. This value can be <c>null</c>
            to indicate that the user's configured sources should be used. Otherwise,
            this should be the source path as a string. If the user has credentials
            configured for a source, this value must exactly match the configured source
            value.
            </param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package ID of the package to install.</param>
            <param name="version">
            The version of the package to install. <c>null</c> can be provided to
            install the latest version of the package.
            </param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(NuGet.IPackageRepository,EnvDTE.Project,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Installs a single package from the specified package source.
            </summary>
            <param name="repository">The package repository to install the package from.</param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package id of the package to install.</param>
            <param name="version">
            The version of the package to install. <c>null</c> can be provided to
            install the latest version of the package.
            </param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating if assembly references from the package should be
            skipped.
            </param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromRegistryRepository(System.String,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that exist on disk in a folder defined in the registry.
            </summary>
            <param name="keyName">
            The registry key name (under NuGet's repository key) that defines the folder on disk
            containing the packages.
            </param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="project">The target project for package installation.</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            <para>
            Dependencies are always ignored.
            </para>
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromRegistryRepository(System.String,System.Boolean,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that exist on disk in a folder defined in the registry.
            </summary>
            <param name="keyName">
            The registry key name (under NuGet's repository key) that defines the folder on disk
            containing the packages.
            </param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="ignoreDependencies">A boolean indicating whether the package's dependencies should be ignored</param>
            <param name="project">The target project for package installation.</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromVSExtensionRepository(System.String,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that are embedded in a Visual Studio Extension Package.
            </summary>
            <param name="extensionId">The Id of the Visual Studio Extension Package.</param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="project">The target project for package installation</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            <para>
            Dependencies are always ignored.
            </para>
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromVSExtensionRepository(System.String,System.Boolean,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that are embedded in a Visual Studio Extension Package.
            </summary>
            <param name="extensionId">The Id of the Visual Studio Extension Package.</param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="ignoreDependencies">A boolean indicating whether the package's dependencies should be ignored</param>
            <param name="project">The target project for package installation</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            </remarks>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstaller2">
            <summary>
            Contains method to install latest version of a single package into a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller2.InstallLatestPackage(System.String,EnvDTE.Project,System.String,System.Boolean,System.Boolean)">
            <summary>
            Installs the latest version of a single package from the specified package source.
            </summary>
            <param name="source">
            The package source to install the package from. This value can be <c>null</c>
            to indicate that the user's configured sources should be used. Otherwise,
            this should be the source path as a string. If the user has credentials
            configured for a source, this value must exactly match the configured source
            value.
            </param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package ID of the package to install.</param>
            <param name="includePrerelease">
            Whether or not to consider prerelease versions when finding the latest version
            to install.
            </param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when <see paramref="includePrerelease" /> is <c>false</c> and no stable version
            of the package exists.
            </exception>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstallerEvents">
            <summary>
            Contains events which are raised when packages are installed or uninstalled from projects and the current
            solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageInstalling">
            <summary>
            Raised when a package is about to be installed into the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageInstalled">
            <summary>
            Raised after a package has been installed into the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageUninstalling">
            <summary>
            Raised when a package is about to be uninstalled from the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageUninstalled">
            <summary>
            Raised after a package has been uninstalled from the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageReferenceAdded">
            <summary>
            Raised after a package has been installed into a project within the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageReferenceRemoved">
            <summary>
            Raised after a package has been uninstalled from a project within the current solution.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstallerProjectEvents">
            <summary>
            Contains batch events which are raised when packages are installed or uninstalled from projects with packages.config
            and the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerProjectEvents.BatchStart">
            <summary>
            Raised before any IVsPackageInstallerEvents events are raised for a project.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerProjectEvents.BatchEnd">
            <summary>
            Raised after all IVsPackageInstallerEvents events are raised for a project.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstallerServices">
            <summary>
            Contains methods to query for installed packages within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.GetInstalledPackages">
            <summary>
            Get the list of NuGet packages installed in the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalled(EnvDTE.Project,System.String)">
            <summary>
            Checks if a NuGet package with the specified Id is installed in the specified project.
            </summary>
            <param name="project">The project to check for NuGet package.</param>
            <param name="id">The id of the package to check.</param>
            <returns><c>true</c> if the package is install. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalled(EnvDTE.Project,System.String,NuGet.SemanticVersion)">
            <summary>
            Checks if a NuGet package with the specified Id and version is installed in the specified project.
            </summary>
            <param name="project">The project to check for NuGet package.</param>
            <param name="id">The id of the package to check.</param>
            <param name="version">The version of the package to check.</param>
            <returns><c>true</c> if the package is install. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalledEx(EnvDTE.Project,System.String,System.String)">
            <summary>
            Checks if a NuGet package with the specified Id and version is installed in the specified project.
            </summary>
            <param name="project">The project to check for NuGet package.</param>
            <param name="id">The id of the package to check.</param>
            <param name="versionString">The version of the package to check.</param>
            <returns><c>true</c> if the package is install. <c>false</c> otherwise.</returns>
            <remarks>
            The reason this method is named IsPackageInstalledEx, instead of IsPackageInstalled, is that
            when client project compiles against this assembly, the compiler would attempt to bind against
            the other overload which accepts SemanticVersion and would require client project to reference NuGet.Core.
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.GetInstalledPackages(EnvDTE.Project)">
            <summary>
            Get the list of NuGet packages installed in the specified project.
            </summary>
            <param name="project">The project to get NuGet packages from.</param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageMetadata">
            <summary>
            Contains information about an installed package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Id">
            <summary>
            Id of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Version">
            <summary>
            Version of the package.
            </summary>
            <remarks>
            Do not use this property because it will require referencing NuGet.Core.dll assembly. Use the VersionString
            property instead.
            </remarks>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Title">
            <summary>
            Title of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Description">
            <summary>
            Description of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Authors">
            <summary>
            The authors of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.InstallPath">
            <summary>
            The location where the package is installed on disk.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.VersionString">
            <summary>
            The version of the package.
            </summary>
            <remarks>
            Use this property instead of the Version property becase with the type string,
            it doesn't require referencing NuGet.Core.dll assembly.
            </remarks>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageProjectMetadata">
            <summary>
            Contains information about project with packages.config where we're executing nuget actions.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageProjectMetadata.BatchId">
            <summary>
            Unique batch id for batch start/end events of the project.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageProjectMetadata.ProjectName">
            <summary>
            Name of the project.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageRestorer">
            <summary>
            Contains methods to restore packages installed in a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageRestorer.IsUserConsentGranted">
            <summary>
            Returns a value indicating whether the user consent to download NuGet packages
            has been granted.
            </summary>
            <returns>true if the user consent has been granted; otherwise, false.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageRestorer.RestorePackages(EnvDTE.Project)">
            <summary>
            Restores NuGet packages installed in the given project within the current solution.
            </summary>
            <param name="project">The project whose NuGet packages to restore.</param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageSourceProvider">
            <summary>
            A public API for retrieving the list of NuGet package sources.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageSourceProvider.GetSources(System.Boolean,System.Boolean)">
            <summary>
            Provides the list of package sources.
            </summary>
            <param name="includeUnOfficial">Unofficial sources will be included in the results</param>
            <param name="includeDisabled">Disabled sources will be included in the results</param>
            <returns>Key: source name Value: source URI</returns>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageSourceProvider.SourcesChanged">
            <summary>
            Raised when sources are added, removed, disabled, or modified.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageUninstaller">
            <summary>
            Contains methods to uninstall packages from a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageUninstaller.UninstallPackage(EnvDTE.Project,System.String,System.Boolean)">
            <summary>
            Uninstall the specified package from a project and specify whether to uninstall its dependency packages
            too.
            </summary>
            <param name="project">The project from which the package is uninstalled.</param>
            <param name="packageId">The package to be uninstalled</param>
            <param name="removeDependencies">
            A boolean to indicate whether the dependency packages should be
            uninstalled too.
            </param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPathContext">
            <summary>
            NuGet path information specific to the current context (e.g. project context).
            Represents captured snapshot associated with current project/solution settings.
            Should be discarded immediately after all queries are done.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPathContext.UserPackageFolder">
            <summary>
            User package folder directory. The path returned is an absolute path.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPathContext.FallbackPackageFolders">
            <summary>
            Fallback package folder locations. The paths (if any) in the returned list are absolute paths. If no
            fallback package folders are configured, an empty list is returned. The item type of this sequence is
            <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPathContext.TryResolvePackageAsset(System.String,System.String@)">
            <summary>
            Fetch a package directory containing the provided asset path.
            </summary>
            <param name="packageAssetPath">Absolute path to package asset file.</param>
            <param name="packageDirectoryPath">Full path to a package directory. 
            <code>null</code> if returned falue is <code>false</code>.</param>
            <returns>
            <code>true</code> when a package containing the given file was found, <code>false</code> - otherwise.
            </returns>
            <example>
            Suppose the project is a packages.config project and the following asset paths are provided:
            
            - C:\src\MyProject\packages\NuGet.Versioning.3.5.0-rc1-final\lib\net45\NuGet.Versioning.dll
            - C:\path\to\non\package\assembly\Newtonsoft.Json.dll
            - C:\src\MyOtherProject\packages\NuGet.Core.2.12.0\lib\net40\NuGet.Core.dll
            - C:\src\MyProject\packages\Autofac.3.5.2\lib\net40\Autofac.dll
            - C:\src\MyProject\packages\Autofac.3.5.2\lib\net40\Autofac.Fake.dll
            
            The result will be:
            
            - C:\src\MyProject\packages\NuGet.Versioning.3.5.0-rc1-final
            - null
            - null
            - C:\src\MyProject\packages\Autofac.3.5.2
            - C:\src\MyProject\packages\Autofac.3.5.2
            </example>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPathContext2">
            <summary>
            NuGet path information specific to the current context (e.g. project context) or solution context
            Represents captured snapshot associated with current project/solution settings.
            Should be discarded immediately after all queries are done.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPathContext2.SolutionPackageFolder">
            <summary>
            Solution packages folder directory. This will always be set irrespective if folder actually exists or not.
            The path returned is an absolute path.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPathContextProvider">
            <summary>
            A factory to initialize <see cref="T:NuGet.VisualStudio.IVsPathContext" /> instances.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPathContextProvider.TryCreateContext(System.String,NuGet.VisualStudio.IVsPathContext@)">
            <summary>
            Attempts to create an instance of <see cref="T:NuGet.VisualStudio.IVsPathContext" />.
            </summary>
            <param name="projectUniqueName">
            Unique identificator of the project. Should be a full path to project file.
            </param>
            <param name="context">The path context associated with given project.</param>
            <returns>
            <code>True</code> if operation has succeeded and context was created.
            False, otherwise, e.g. when provided project is not managed by NuGet.
            </returns>
            <throws>
            <code>ArgumentNullException</code> if projectUniqueName is passed as null.
            <code>InvalidOperationException</code> when it fails to create a context and return appropriate error message.
            </throws>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPathContextProvider2">
            <summary>
            A factory to initialize <see cref="T:NuGet.VisualStudio.IVsPathContext2" /> instances.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPathContextProvider2.TryCreateSolutionContext(NuGet.VisualStudio.IVsPathContext2@)">
            <summary>
            Attempts to create an instance of <see cref="T:NuGet.VisualStudio.IVsPathContext2" /> for the solution.
            </summary>
            <param name="context">The path context associated with this solution.</param>
            <returns>
            <code>True</code> if operation has succeeded and context was created.
            <code>False</code> otherwise.
            </returns>
            <throws>
            <code>InvalidOperationException</code> when it fails to create a context and return appropriate error message.
            </throws>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPathContextProvider2.TryCreateSolutionContext(System.String,NuGet.VisualStudio.IVsPathContext2@)">
            <summary>
            Attempts to create an instance of <see cref="T:NuGet.VisualStudio.IVsPathContext2" /> for the solution.
            </summary>
            <param name="solutionDirectory">
            path to the solution directory. Must be an absolute path.
            It will be performant to pass the solution directory if it's available.
            </param>
            <param name="context">The path context associated with this solution.</param>
            <returns>
            <code>True</code> if operation has succeeded and context was created.
            <code>False</code> otherwise.
            </returns>
            <throws>
            <code>ArgumentNullException</code> if solutionDirectory is passed as null.
            <code>InvalidOperationException</code> when it fails to create a context and return appropriate error message.
            </throws>
        </member>
        <member name="T:NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult">
            <summary>
            Contains the result of the migrate operation on a legacy project.json project
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult.IsSuccess">
            <summary>
            Returns the success value of the migration operation.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult.ErrorMessage">
            <summary>
            If migrate operation was unsuccessful, stores the error message in the exception.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrator">
            <summary>
            Contains methods to migrate a project.json based legacy project to PackageReference based project.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrator.MigrateProjectJsonToPackageReferenceAsync(System.String)">
            <summary>
            Migrates a legacy Project.json based project to Package Reference based project. The result 
            should be casted to type <see cref="T:NuGet.VisualStudio.IVsProjectJsonToPackageReferenceMigrateResult" />
            The backup of the original project file and project.json file is created in the Backup folder
            in the root of the project directory.
            </summary>
            <param name="projectUniqueName">The full path to the project that needs to be migrated</param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsSemanticVersionComparer">
            <summary>
            An interface for comparing two opaque version strings by treating them as NuGet semantic
            versions.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsSemanticVersionComparer.Compare(System.String,System.String)">
            <summary>
            Compares two version strings as if they were NuGet semantic version
            strings. Returns a number less than zero if <paramref name="versionA" />
            is less than <paramref name="versionB" />. Returns zero if the two versions 
            are equivalent. Returns a number greater than zero if <paramref name="versionA" />
            is greater than <paramref name="versionB" />.
            </summary>
            <param name="versionA">The first version string.</param>
            <param name="versionB">The second version string.</param>
            <exception cref="T:System.ArgumentNullException">If either version string is null.</exception>
            <exception cref="T:System.ArgumentException">If either string cannot be parsed.</exception>
            <returns>
            A standard comparison integer based on the relationship between the
            two provided versions.
            </returns>
        </member>
        <member name="T:NuGet.VisualStudio.VsPackageEventHandler">
            <summary>
            Defines an event handler delegate for package related events.
            </summary>
            <param name="metadata">Description of the package.</param>
        </member>
        <member name="T:NuGet.VisualStudio.VsPackageProjectEventHandler">
            <summary>
            Defines an event handler delegate for nuget batch events with projects with packages.config file.
            </summary>
            <param name="metadata">Description of the package.</param>
        </member>
        <member name="T:NuGet.VisualStudio.IRegistryKey">
            <summary>
            Specifies methods for manipulating a key in the Windows registry.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IRegistryKey.OpenSubKey(System.String)">
            <summary>
            Retrieves the specified subkey for read or read/write access.
            </summary>
            <param name="name">The name or path of the subkey to create or open.</param>
            <returns>The subkey requested, or null if the operation failed.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IRegistryKey.GetValue(System.String)">
            <summary>
            Retrieves the value associated with the specified name.
            </summary>
            <param name="name">The name of the value to retrieve. This string is not case-sensitive.</param>
            <returns>The value associated with name, or null if name is not found.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IRegistryKey.Close">
            <summary>
            Closes the key and flushes it to disk if its contents have been modified.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageManagerProvider">
            <summary>
            Interface allowing integration of alternate package manager suggestion for a NuGet package. 
            For example jQuery may appear on Bower and npm,
            it might be more appropriate to install a package from them for certain projects. 
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageManagerProvider.PackageManagerName">
            <summary>
            Localized display package manager name.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageManagerProvider.PackageManagerId">
            <summary>
            Package manager unique id.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageManagerProvider.Description">
            <summary>
            The tool tip description for the package
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageManagerProvider.CheckForPackageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a recommendation should be surfaced for an alternate package manager. 
            This code should not rely on slow network calls, and should return rapidly.
            </summary>
            <param name="packageId">Current package id</param>
            <param name="projectName">Unique project name for finding the project through VS dte</param>
            <param name="token">Cancellation Token</param>
            <returns>return true if need to direct to integrated package manager for this package</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageManagerProvider.GoToPackage(System.String,System.String)">
            <summary>
            This Action should take the user to the other package manager.
            </summary>
            <param name="packageId">Current package id</param>
            <param name="projectName">Unique project name for finding the project through VS dte</param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsTemplateWizard">
            <summary>
            Defines the logic for a template wizard extension.
            </summary>
        </member>
        <member name="T:NuGet.IFileSystem">
            <summary>
            Legacy
            </summary>
            <remarks>Do not use!</remarks>
        </member>
        <member name="T:NuGet.IPackage">
            <summary>
            Legacy
            </summary>
            <remarks>Do not use!</remarks>
        </member>
        <member name="P:NuGet.IPackage.IsAbsoluteLatestVersion">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackage.IsLatestVersion">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackage.Listed">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackage.Published">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackage.AssemblyReferences">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackage.GetFiles">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackage.GetSupportedFrameworks">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackage.GetStream">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackage.ExtractContents(NuGet.IFileSystem,System.String)">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="T:NuGet.IPackageAssemblyReference">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackageAssemblyReference.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:NuGet.IPackageFile">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackageFile.Path">
            <summary>
            Gets the full path of the file inside the package.
            </summary>
        </member>
        <member name="P:NuGet.IPackageFile.EffectivePath">
            <summary>
            Gets the path that excludes the root folder (content/lib/tools) and framework folder (if present).
            </summary>
            <example>
            If a package has the Path as 'content\[net40]\scripts\jQuery.js', the EffectivePath 
            will be 'scripts\jQuery.js'.
            
            If it is 'tools\init.ps1', the EffectivePath will be 'init.ps1'.
            </example>
        </member>
        <member name="P:NuGet.IPackageFile.TargetFramework">
            <summary>
            Framework
            </summary>
        </member>
        <member name="M:NuGet.IPackageFile.GetStream">
            <summary>
            Returns package file stream
            </summary>
            <returns>Package file stream</returns>
        </member>
        <member name="T:NuGet.IPackageRepository">
            <summary>
            Legacy IPackageRepository
            </summary>
            <remarks>Do not use!</remarks>
        </member>
        <member name="P:NuGet.IPackageRepository.Source">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackageRepository.PackageSaveMode">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="P:NuGet.IPackageRepository.SupportsPrereleasePackages">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackageRepository.GetPackages">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackageRepository.AddPackage(NuGet.IPackage)">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="M:NuGet.IPackageRepository.RemovePackage(NuGet.IPackage)">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="T:NuGet.PackageSaveModes">
            <summary>
            Legacy
            </summary>
        </member>
        <member name="F:NuGet.PackageSaveModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NuGet.PackageSaveModes.Nuspec">
            <summary>
            Nuspec
            </summary>
        </member>
        <member name="F:NuGet.PackageSaveModes.Nupkg">
            <summary>
            Nupkg
            </summary>
        </member>
        <member name="T:NuGet.SemanticVersion">
            <summary>
            This is the legacy implementation of the semantic version class. NuGet 2.x implemented this
            under the <code>NuGet</code> namespace. In NuGet 3.x, we moved <code>SemanticVersion</code>
            to <code>NuGet.Versioning.SemanticVersion</code>. We exposed multiple public APIs that have
            the type <code>NuGet.SemanticVersion</code>. Therefore, we still need to have a semantic
            version class implemented at the old location.
            </summary>
        </member>
        <member name="P:NuGet.SemanticVersion.Version">
            <summary>
            Gets the normalized version portion.
            </summary>
        </member>
        <member name="P:NuGet.SemanticVersion.SpecialVersion">
            <summary>
            Gets the optional special version.
            </summary>
        </member>
        <member name="M:NuGet.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:NuGet.SemanticVersion.TryParse(System.String,NuGet.SemanticVersion@)">
            <summary>
            Parses a version string using loose semantic versioning rules that allows 2-4 version components followed by an optional special version.
            </summary>
        </member>
        <member name="M:NuGet.SemanticVersion.TryParseStrict(System.String,NuGet.SemanticVersion@)">
            <summary>
            Parses a version string using strict semantic versioning rules that allows exactly 3 components and an optional special version.
            </summary>
        </member>
        <member name="M:NuGet.SemanticVersion.ParseOptionalVersion(System.String)">
            <summary>
            Attempts to parse the version token as a SemanticVersion.
            </summary>
            <returns>An instance of SemanticVersion if it parses correctly, null otherwise.</returns>
        </member>
        <member name="M:NuGet.SemanticVersion.ToNormalizedString">
            <summary>
            Returns the normalized string representation of this instance of <see cref="T:NuGet.SemanticVersion" />.
            If the instance can be strictly parsed as a <see cref="T:NuGet.SemanticVersion" />, the normalized version
            string if of the format {major}.{minor}.{build}[-{special-version}]. If the instance has a non-zero
            value for <see cref="P:System.Version.Revision" />, the format is {major}.{minor}.{build}.{revision}[-{special-version}].
            </summary>
            <returns>The normalized string representation.</returns>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>pONxHyrB5yuZZMFLswJbE0iL7sQ=</DigestValue></Reference></SignedInfo><SignatureValue>CWyImBy9p851RaM0Ww5jRs/EBaTxlXFRwpetxkPK/Wt+OlxjuY2QkCl/sLLMTjETMzwtWwNmfHRQU9KzzmkxnE6RnFDBL5UQpvTgnRDYZyeA271a87C0oHOuD0xosKf/uSwj6X+AyNraLqMiwt9mc3+Ppx/hnfDfOkA5UXQhZjBzFItIQLqsSXNBwGefepd1Rx8AcC/WY0+s3GUwaDUaXs+5OMC2dbsmxaGkeZUar53Cc5oxmfGez3Mg9VausiSlgWr2Ed6fnytoIv3GqsEtdhDNWnZnQDYIbHpHV88+TQ3yDrWdGOcqVrKAsSJ0tt4HVCLUVxyonXs/CfrSDklHcA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>qCn+1BDI/1UKnpkAA1KP3LC/+av4Uf5cjFTCJ85MK5br24Ecy4Yrecp1frhngyaGvdYvHD7HWKqPb5X7WvynxhvBw+hMF04iPbdbVlx/11r1Lbq7pgm/BnzumP5A+TC4a/5Ab3SzuNY4ScnQhwcvMd+2vE6j0J63YntWcHVPZ78FzKOuvgCSwhtQoWE7EAABsYbQKfNA9Q/Zow9Xq2MJqNypaudHQ6e+FcQ9J6ToVlKIz1mZoQCENpvQOdIqDS/mBOK/E5aIg6lRNxhBieL5hZ2OZRo9A2TMxd5QcF3yC4Wpj7FF6Hf/g50Ju3Lg5lYIlbkrgxKJMfznWHIdvfmDIw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIE7TCCA9WgAwIBAgITMwAAAXl8LldOUuHK1gABAAABeTANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xNzA4MTEyMDExMTVaFw0xODA4MTEyMDExMTVaMIGDMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYDVQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCoKf7UEMj/VQqemQADUo/csL/5q/hR/lyMVMInzkwrluvbgRzLhit5ynV+uGeDJoa91i8cPsdYqo9vlfta/KfGG8HD6EwXTiI9t1tWXH/XWvUturumCb8GfO6Y/kD5MLhr/kBvdLO41jhJydCHBy8x37a8TqPQnrdie1ZwdU9nvwXMo66+AJLCG1ChYTsQAAGxhtAp80D1D9mjD1erYwmo3Klq50dDp74VxD0npOhWUojPWZmhAIQ2m9A50ioNL+YE4r8TloiDqVE3GEGJ4vmFnY5lGj0DZMzF3lBwXfILhamPsUXod/+DnQm7cuDmVgiVuSuDEokx/OdYch29+YMjAgMBAAGjggFhMIIBXTATBgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQU+OR+jRxjfACqzHMAStPybTiqzYEwUgYDVR0RBEswSaRHMEUxDTALBgNVBAsTBE1PUFIxNDAyBgNVBAUTKzIyOTgwMysxYWJmOWU1Zi1jZWQwLTQyZTYtYTY1ZC1kOTM1MDk1OWZlMGUwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUyaCh8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljQ29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQADggEBAG9La36GDdgLJlBrOojIWqn2suoqmaflBjREAe9z+60v/e341YBqNRw0xxMMtV5kPHNrjPJv02m+zjsPm/kFcjwdRuHonD42sW81qaZQVH/h1Fc9Ox56XI8BP3c/XnMnV/qnMOfUcq+L33Ei/Yrg+uAt31/y3ndk39qwBgAJq0aQo/X+gYYskyt1xhEo1+WK4hwnq5eMmsTiBxnT8mQXsSvd8wh6eFCFBjIcOVCjzYtw3gjVe29MP5rodW3kyxNXHClZOF++Raummsr5KZ7NOM+5yAW6LPvEJb9oDd8Pe0IalcePvVprkAtR+te354+yszMocwNcf6NGgpyttjZ3doc=</X509Certificate><X509Certificate>MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMxMjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJcap6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKNYv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3nrAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGYYDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEytWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUeDordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z52Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZogwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/aZuW4hCoELQ3UAjWwz0=</X509Certificate><X509Certificate>MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcNMjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWEzbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/kXG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjnrOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTNAz93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAHMuouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yqhv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXxBLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/kbQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3su77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcrSwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZEjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21adlaBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIEwzCCA6ugAwIBAgITMwAAAMWWQGBL9N6uLgAAAAAAxTANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTYwOTA3MTc1ODUyWhcNMTgwOTA3MTc1ODUyWjCBszELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjENMAsGA1UECxMETU9QUjEnMCUGA1UECxMebkNpcGhlciBEU0UgRVNOOkMwRjQtMzA4Ni1ERUY4MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtrwz4CWOpvnwEBVOe1crKElrs3CQl/yun1cdkpugh/MxsuoGn7BL43GRTxRn7sPD7rq1Dxj4smPlgVZr/ZhGMA8J3zXOqyIcD4hYFikXuhlGuuSokunCAxUl5N4gjN/M7+NwJPm2JtYKZLBdH5J/y+GIk7rQhpgbstpLOZf4GHgC8Myji7089O1uX2MCKFFU+wt2Y560O4Xc2NVjeuG+nnq5pGyq9111nK3f0DeT7FWjDVQWFghKOhyeBb4iMhmkdA8vWpYmx6TNc+d35nSZcLc0EhSIVJkzEBYfwkrzxFaG/pgNJ9C4jm/zHgwWLZwQpU7K2fP15fGkBGplwNjr1wIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFA4B9X87yXgCWEZxOwn8mnVXhjjEMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBAAUS3tgSEzCpyuw21ySUAWvGltQxunyLUCaOf1dffUcG25oaOW/WuIFJs0lv8Py6TsOrulsx/4NTkIyXra/MsJvwczMX2s/vx6g63O3osQI85qHDdp8IMULGmry+oqPVTuvL7Bac905EqqGXGd9UY7y14FcKWBWJ28vjncTw8CW876pY80nSm8hC/38M4RMGNEp7KGYxx5ZgGX3NpAVeUBio7XccXHEy7CSNmXm2V8ijeuGZJ9fIMkhiAWLEfKOgxGZ63s5yGwpMt2QE/6Py03uF+X2DHK76w3FQghqiUNPFC7uUo9poSfArmeLDuspkPAJ46db02bqNyRLP00bczzw=</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
